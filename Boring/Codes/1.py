"""
T = int(raw_input())
for t in range(T):
	n,p = map(int,raw_input().split())
	s = map(int,raw_input().split())
	s.sort()
	ans = 10**9 
	for i in range(n-p+1):
		temp = s[i+p-1]
		temp_sum = 0
		for j in range(i,i+p):
			temp_sum += temp-s[j]
		ans = min(ans,temp_sum)
	print "Case #{}: {}".format(t+1,ans)
"""

"""
def simple_man(a,b):
	return abs(a[0]-b[0])+abs(a[1]-b[1])
def man(a,points):
	temp = 10**9
	for x in points:
		oo = simple_man(a,x)
		if oo<temp:
			temp = oo
	return temp
T = int(raw_input())
for t in range(T):
	r,c = map(int,raw_input().split())
	M = []
	points = []
	for i in range(r):
		M.append(list(raw_input()))
		for j in range(c):
			if M[i][j]=='1':
				points.append([i,j])
	ans = 10**9
	found = False
	for i in range(r):
		for j in range(c):
			if M[i][j]=='0':
				found = True
				M[i][j] = '1'
				points.append([i,j])
				temp = 0
				for k in range(r):
					for l in range(c):
						if M[k][l]=='0':
							ooo = man([k,l],points)
							if temp<ooo:
								temp = ooo
				if temp<ans:
					ans = temp
				M[i][j]='0'
				points.pop()
	if found==False:
		ans = 0
	print "Case #{}: {}".format(t+1,ans)

"""

"""
T = int(input())
for t in range(T):
	n = int(input())
	A = map(int, input().split())
	print(min(A))
"""

# T = int(input())
# for t in range(T):
# 	n = int(input())
# 	if n==2:
# 		print('NO')
# 	else:
# 		print('YES')
		

"""
s = "12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#"
s = "10#11#12"
# s = "1326#"
# s = "25#"
if s[-1]=='#':
	l = s.split('#')
	ans = ''
	for x in l:
		if x!='':
			if len(x)==2:
				ans += chr(int(x)+96)
			else:
				last = chr(int(x[-2:]) + 96)
				for t in range(len(x)-2):
					ans += chr(int(x[t])+96)
				ans += last
else:
	l = s.split('#')
	temp = l[-1]
	l.pop()
	ans = ''
	for x in l:
		if x!='':
			if len(x)==2:
				ans += chr(int(x)+96)
			else:
				last = chr(int(x[-2:]) + 96)
				for t in range(len(x)-2):
					ans += chr(int(x[t])+96)
				ans += last
	for x in range(len(temp)):
		ans += chr(int(temp[x])+96)
print(ans)
"""

"""
watchedVideos = [["A","B"],["C"],["C","B"],["D"]]
friends = [[1,2],[0,3],[0,3],[1,2]]
# friends = [[1,2],[0,3],[0,3],[1,2]]
id = 0
level = 1
pre_lev = 0
pre_states = [id]
visited = [0 for i in range(len(friends))]
visited[id] = 1
next_states = []
while(pre_lev < level):
	for state in pre_states:
		for nex in  friends[state]:
			if visited[nex]==0:
				visited[nex]=1
				next_states += [nex]
	pre_lev += 1
	pre_states = next_states
	next_states = []
final_movies = {}
for state in pre_states:
	for x in watchedVideos[state]:
		if x not in final_movies:
			final_movies[x] = 1
		else:
			final_movies[x] += 1
# print(final_movies)
x = sorted(final_movies.items(), key = lambda kv:(kv[1], kv[0]))
print(list(map(lambda k: k[0], x)))
"""

"""
s = "leetcode"
n = len(s)
Ans = [[0 for i in range(n)] for i in range(n)] 
start, end, dist = 0, 0, 0
for dist in range(1, n): 
	start = 0
	for end in range(dist, n): 
		if s[start] == s[end]: 
			Ans[start][end] = Ans[start+1][end-1] 
		else: 
			Ans[start][end] = (min(Ans[start][end-1], Ans[start+1][end])+1) 
		start += 1
print(Ans[0][n-1])
"""

"""
arr = [1,3,4,8]
queries = [[0,1],[1,2],[0,3],[3,3]]
arr = [4,8,2,10]
queries = [[2,3],[1,3],[0,0],[0,3]]
n = len(arr)
Ans = [[0 for i in range(n)] for j in range(n)]
for i in range(n):
	Ans[i][i] = arr[i]
for i in range(0, n-1):
	for j in range(i+1, n):
		Ans[i][j] = Ans[i][j-1] ^ arr[j]
ans = []
for q in queries:
	ans.append(Ans[q[0]][q[1]])
print(ans)
"""

"""
from functools import lru_cache
import time

@lru_cache(maxsize=1000)
def fib(a):
	if a == 1 or a == 0:
		return 1
	return fib(a-1)+fib(a-2)

def fib2(a):
	x = 1
	y = 1
	for i in range(a-1):
		x, y = x+y, x
	return x

def fib3(a):
	if a==0 or a==1:
		return 1
	return fib3(a-1)+fib3(a-2)

t1 = time.time()
print(fib(30))
t2 = time.time()
print(fib3(30))
t3 =  time.time()

print(t2-t1)
print(t3-t2)
"""

"""
class Node:
	def __init__(self, value):
		self.val = value
		self.left = None
		self.right = None

def inorder(node):
	if node:
		yield from inorder(node.left)
		yield node.val
		yield from inorder(node.right)

def dfs(node, path):
	path.append(node.val)
	if node.left == None and node.right == None:
		print(path)
		path.pop()
	else:
		if node.left:
			dfs(node.left, path)
		if node.right:
			dfs(node.right, path)
		path.pop()

	# if node:
	# 	path.append(node.val)
	# 	dfs(node.left, path)
	# 	dfs(node.right, path)
	# 	path.pop()
	# else:
	# 	print(path)


root = Node(0)
root.left = Node(1)
root.right = Node(2)
root.left.left = Node(3)
root.right.left = Node(5)
root.right.right = Node(6)
root.left.left.right = Node(8)

# print(list(inorder(root)))
print(dfs(root, []))

"""

"""
def isValidr(k, m):
	if k<0 or k>=m:
		return False
	return True

def isValidc(k, n):
	if k<0 or k>=n:
		return False
	return True

mat = [[1,2,3],[4,5,6],[7,8,9]]
m, n = len(mat), len(mat[0])
Ans = [[0 for i in range(n)] for j in range(m)]
K = 1
for i in range(m):
	for j in range(n):
		temp = 0
		for k in range(i-K, i+K+1):
			if isValidr(k, m):
				for k2 in range(j-K, j+K+1):
					if isValidc(k2, n):
						#print(k, k2)
						temp += mat[k][k2]
		#print(i, j, temp)
		Ans[i][j] = temp
print(Ans)
"""

"""
class Node():
	def __init__(self, value):
		self.val = value
		self.left = None
		self.right = None

def dfs(node, parent_val, gparent_val, final):
	if node:
		if gparent_val %2 == 0:
			final += node.val
		final = dfs(node.left, node.val, parent_val, final)
		final = dfs(node.right, node.val, parent_val, final)
	return final


root = Node(6)

root.left = Node(3)
root.right = Node(8)

root.left.left = Node(5)
root.left.right = Node(7)

root.right.left = Node(16)
root.right.right = Node(13)

root.right.left.left = Node(1)
root.right.right.right = Node(33)

print(dfs(root, -1, -1, 0))
"""




"""
n = 6
connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]
n = 5
connections = [[0,1],[0,2],[3,4],[2,3]]
n = 12
connections = [[1,5],[1,7],[1,2],[1,4],[3,7],[4,7],[3,5],[0,6],[0,1],[0,4],[2,6],[0,3],[0,2]]
n = 11
connections = [[1,4],[0,3],[1,3],[3,7],[2,7],[0,1],[2,4],[3,6],[5,6],[6,7],[4,7],[0,7],[5,7]]
visited = [0] * n
dis = 0
if len(connections) < n-1:
	print(-1)
	print('Hi')
else:
	graph = [set() for i in range(n)]
	for x in connections:
		# a, b = max(x), min(x)
		graph[x[0]].add(x[1])
		graph[x[1]].add(x[0])
	print(graph)
	for i in range(n):
		if visited[i] == 0:
			visited[i] = 1
			q = [i]
			while(len(q)>0):
				pre = q.pop(0)
				for x in graph[pre]:
					if visited[x] == 0:
						visited[x] = 1
						q.append(x)
			dis += 1
	print(dis-1)
"""

# def dist(x, y):
# 	return abs(x[0]-y[0]) + abs(y[1]-x[1])

# def centrs(x):
# 	a,b,n=0,0,0
# 	for t in x:
# 		n+= 1
# 		a+= t[0]
# 		b+= t[1]
# 	return (a//n, b//n)


# s = ['ABCDEF', 'GHIJKL', 'MNOPQR', 'STUVWX', 'YZ']
# var = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

# word = "YPLTJVLSUTEWJMXNUCATGWKFHHUOMWVSNBMWSNYVWBFOCIWFOQPRTYABPKJOBZZNGRUCXEAMVNKAGAWYAVQTDGDTUGJIWFDPMUCAIOZZDIEUQUULDEIABBGVIRKLSBXWTU"

# n = len(word)

# dp(i, 0) = dp(i-1, 0)+dist(word[i], word[i-1])

# final_set = set()
# for i in word:
# 	final_set.add(i)

# points = {}
# for i in var:
# 	points[i] = divmod(var.index(i), 6)

# finals = []
# for x in final_set:
# 	finals.append(points[x])
# centroids = [(1, 1), (2, 5)]
# for i in range(100):
# 	classes = {0:[], 1:[]}
# 	for point in finals:
# 		if dist(point, centroids[0]) < dist(point, centroids[1]):
# 			classes[0].append(point)
# 		else:
# 			classes[1].append(point)
# 	centroids = [centrs(classes[0]), centrs(classes[1])]

# final_class1 = []
# final_class2 = []
# final_dist1= 0
# final_dist2 = 0
# for x in word:
# 	xp = points[x]
# 	if dist(xp, centroids[0]) < dist(xp, centroids[1]):
# 		final_class1.append(xp)
# 	else:
# 		final_class2.append(xp)
# for x in range(1,len(final_class1)):
# 	final_dist1 += dist(final_class1[x], final_class1[x-1])
# for x in range(1,len(final_class2)):
# 	final_dist1 += dist(final_class2[x], final_class2[x-1])
# print(final_dist1)




"""
import heapq 

def bfs(node, g, visited, rem):
	count = 0
	visited[node] = 1
	till = 0
	h = []
	if node not in g:
		return 0
	for ed in g[node]:
		heapq.heappush(h, [ed[1], ed[0]])
	while h != []:
		ne = heapq.heappop(h)
		if ne[0] > rem:
			return count
		if visited[ne[1]] == 0:
			# print('next node:', ne[1])
			visited[ne[1]] = 1
			count += 1
			till = ne[0]
			for ed in g[ne[1]]:
				if visited[ed[0]] == 0:
					# print('pushing', [ed[1]+till, ed[0]])
					heapq.heappush(h, [ed[1]+till, ed[0]])
	return count

def findTheCity():
	n = 41
	edges = [[29,32,7398],[18,21,8588],[10,29,2094],[2,29,1036],[5,35,4315],[4,14,2184],[7,19,9872],[16,40,672],[24,39,2201],[15,20,2012],[30,39,2848],[17,28,4143],[6,38,28],[12,21,2185],[8,12,9527],[11,15,9942],[23,25,811],[25,31,8985],[18,30,8918],[24,38,969],[24,34,2776],[34,36,3454],[19,23,9161],[26,40,4035],[8,31,4376],[3,39,6183],[18,29,2397],[1,6,5482],[6,40,3903],[17,29,7125],[2,32,9258],[15,30,7497],[12,15,9657],[12,24,892],[14,36,7960],[1,15,5023],[17,39,3433],[33,40,1613],[11,34,2695],[1,12,5288],[5,22,9260],[2,5,8702],[19,28,2027],[31,35,9745],[15,40,1565],[14,19,6641],[3,18,5141],[16,34,5947],[6,33,1114],[4,13,2080],[11,39,2843],[25,37,1167],[0,34,6143],[3,23,444],[18,19,2936],[17,19,4341],[18,23,1134],[29,34,8923],[28,38,5300],[7,22,6734],[9,22,2235],[8,28,2835],[2,12,7702],[18,32,2048],[17,18,7682],[6,12,3953],[6,34,3051],[19,27,6487],[3,19,6160],[8,35,3333],[36,39,1990],[29,33,2203],[34,38,5595],[23,37,8960],[0,24,8470],[13,28,85],[21,39,3250],[4,10,1549],[0,28,9062],[3,21,4926],[32,34,2138],[30,32,9694],[2,25,3531],[26,33,8241],[18,22,8876],[0,16,6227],[2,35,7304],[13,22,654],[2,7,9667],[25,33,8686],[21,23,9718],[22,25,6604],[8,21,6521],[26,31,6222],[18,36,8305],[31,40,7582],[24,25,2524],[13,36,9048],[2,9,3568],[6,11,4336],[23,36,5319],[28,32,4409],[10,23,790],[30,37,5179],[7,38,6624],[18,39,8444],[14,39,1022],[29,39,8329],[3,38,9310],[24,35,8086],[11,17,1766],[3,6,3850],[4,8,3376],[18,37,2368],[8,15,398],[1,2,2998],[5,39,50],[7,17,7062],[21,36,9391],[3,36,4478],[1,13,4560],[6,31,30],[10,11,1666],[11,33,866],[29,37,9470],[0,15,6181],[24,40,3012],[15,16,8854],[25,36,4158],[8,13,388],[33,38,6661],[13,27,8127],[4,18,2828],[17,23,4783],[13,25,4370],[3,14,2713],[31,36,8153],[10,35,5836],[4,16,3998],[21,24,4209],[32,40,3710],[30,40,5616],[16,32,3536],[29,40,7495],[5,6,777],[12,14,4380],[4,35,5668],[12,18,8142],[0,23,3231],[6,28,3445],[18,20,7036],[3,8,2966],[1,11,5310],[10,28,7883],[9,24,361],[27,35,7415],[3,10,9070],[2,22,7163],[35,40,4238],[19,40,3302],[13,14,9067],[9,19,5590],[33,35,2904],[9,38,7246],[8,20,9429],[11,30,5056],[32,36,2986],[19,29,6922],[18,24,3543],[27,40,3117],[25,26,975],[3,15,1316],[13,32,3230],[32,38,2740],[4,6,5906],[6,37,6663],[33,39,3667],[12,38,3376],[2,38,9],[19,38,7211],[30,36,5943],[4,40,8362],[7,15,9353],[14,38,619],[15,25,4784],[7,30,8267],[0,33,9941],[20,35,8543],[20,27,2515],[10,19,1900],[3,27,3704],[13,40,8393],[0,38,1435],[23,39,2619],[15,29,6820],[6,21,7176],[2,23,1626],[12,19,9334],[10,13,5479],[3,34,270],[20,36,8556],[0,5,5050],[2,24,993],[23,28,6902],[22,38,5125],[4,25,8285],[9,39,9245],[1,14,4116],[15,22,9249],[6,19,2510],[7,25,6362],[17,40,2957],[13,18,6081],[10,22,5311],[11,40,2231],[19,30,2061],[4,11,8774],[14,22,7865],[22,35,7748],[6,18,9730],[12,37,6419],[12,13,6611],[9,29,2926],[5,14,4481],[5,40,7552],[5,27,6362],[15,33,5538],[0,35,2325],[13,24,6075],[0,8,1198],[5,7,9739],[12,23,2329],[20,24,368],[15,21,1790],[33,37,8373],[1,22,3827],[4,15,4412],[4,32,4626],[38,39,3299],[8,36,231],[16,35,9382],[2,30,162],[7,33,6495],[0,18,860],[4,26,7174],[18,25,1117],[7,40,7368],[12,40,2374],[25,39,5120],[32,33,8813],[16,30,9742],[19,22,1778],[25,38,2587],[21,32,2794],[12,25,1230],[18,35,8593],[5,31,1878],[35,38,1777],[30,35,2493],[12,39,8549],[12,30,102],[5,12,8159],[23,40,9337],[3,40,1613],[21,33,5667],[26,35,2311],[6,10,277],[36,40,8292],[12,28,466],[4,20,5373],[17,34,8137],[3,28,9499],[3,32,3053],[12,34,9842],[1,4,2564],[15,26,8159],[11,32,1987],[23,38,4242],[20,30,2584],[12,17,5508],[13,26,5762],[19,25,3713],[35,39,8299],[16,38,1569],[3,33,8],[28,36,7840],[17,25,2697],[8,26,4273],[4,30,916],[2,8,9983],[2,3,8751],[9,25,1807],[11,20,9608],[3,7,8849],[3,37,4513],[23,24,5153],[10,20,4732],[2,15,5577],[11,37,5918],[16,37,4528],[2,36,2655],[4,29,4764],[5,11,9782],[7,14,9813],[29,38,6194],[25,28,6494],[21,31,3215],[16,21,5671],[18,34,1062],[28,29,7210],[4,33,370],[14,35,7641],[8,17,5084],[32,37,1249],[14,25,8996],[7,20,6614],[4,21,4482],[24,26,8596],[5,15,4318],[11,35,3378],[14,15,7614],[19,34,7340],[20,29,3803],[21,29,7340],[17,24,114],[23,34,6998],[1,26,4844],[0,19,4598],[29,36,991],[20,39,603],[10,36,3472],[0,40,7022],[17,30,4478],[22,28,3964],[13,16,7288],[9,37,5743],[4,19,5391],[10,32,6681],[14,37,4790],[6,25,8524],[19,33,19],[13,39,4386],[0,7,3044],[31,39,4521],[13,38,112],[11,23,1165],[10,15,2360],[3,17,2633],[0,13,7735],[6,14,9568],[10,18,1704],[16,24,4960],[1,19,4486],[27,28,6513],[13,34,5320],[18,38,1955],[10,12,1490],[0,39,9650],[11,18,1911],[19,20,2503],[30,38,5934],[20,23,1169],[9,33,1654],[21,27,4047],[34,37,8988],[21,34,9933],[27,29,5157],[2,13,9683],[24,29,9869],[2,20,587],[10,16,3501],[29,30,3658],[8,18,5723],[6,27,2290],[26,37,1025],[6,29,2054],[0,32,8301],[1,23,1913],[7,32,3891],[11,28,2289],[20,33,3235],[31,34,7810],[26,29,4253],[5,25,6489],[3,31,5849],[14,30,8659],[5,33,1573],[2,34,5631],[6,24,9233],[15,28,20],[6,7,3370],[21,25,3164],[13,31,4332],[2,40,8563],[4,17,2914],[24,28,1489],[15,24,7814],[7,27,1997],[4,27,382],[14,31,2418],[31,38,6623],[3,13,4781],[18,27,4366],[10,25,9791],[3,29,966],[28,33,1794],[22,32,3833],[11,14,4830],[16,18,445],[0,2,9952],[8,37,5220],[3,5,431],[22,37,7854],[19,21,2589],[34,35,3141],[2,4,2886],[20,40,6911],[7,11,2342],[9,26,7481],[2,17,7286],[16,23,2125],[7,23,5729],[11,36,1889],[3,30,723],[1,30,832],[7,18,9922],[4,23,2448],[9,30,9296],[0,36,5952],[4,22,6294],[9,32,1337],[11,13,5448],[33,36,5227],[1,8,5964],[10,14,1408],[24,27,788],[6,32,4425],[25,27,2184],[22,24,8774],[26,28,7974],[12,31,4386],[11,29,4277],[22,27,8791],[5,8,1339],[37,38,2489],[12,29,5621],[16,33,2190],[12,22,3768],[16,31,7208],[11,27,6979],[22,26,9630],[21,38,8823],[11,22,1535],[12,33,4094],[8,11,4161],[10,39,7740],[0,12,9197],[8,25,6145],[24,36,4001],[1,7,352],[9,28,4069],[7,21,9550],[27,32,6686],[0,37,6813],[15,39,5541],[35,36,743],[3,4,1680],[1,29,370],[15,31,38],[9,27,4184],[22,23,6374],[27,37,1807],[18,28,5905],[0,14,3204],[9,36,6711],[14,20,1110],[18,33,8230],[10,31,7701],[4,28,2232],[5,38,3146],[14,18,989],[1,9,1541],[22,39,8912],[22,40,9879],[5,29,8804],[0,3,6015],[37,40,5955],[8,30,1542],[15,32,7869],[5,16,4776],[6,9,5627],[8,34,290],[13,29,7289],[13,23,364],[23,32,3036],[9,21,32],[19,35,1023],[16,39,9250],[27,39,9124],[7,39,1010],[4,7,8908],[6,13,9703],[2,27,4384],[4,36,4069],[3,9,2764],[1,38,9560],[5,37,830],[5,9,6897],[27,34,8895],[25,40,700],[7,16,8361],[27,36,5088],[7,36,5317],[0,10,9807],[8,19,8962],[19,31,3126],[21,28,333],[4,37,6387],[7,26,8992],[5,10,6448],[19,36,1739],[10,34,8464],[22,29,793],[0,30,9755],[10,33,8488],[23,30,6942],[11,21,6042],[5,32,9620],[33,34,343],[15,18,3223],[6,15,6013],[1,5,7221],[1,34,145],[17,21,2095],[9,10,6221],[14,40,9529],[21,30,8051],[23,27,6392],[2,39,1585],[14,16,5266],[7,10,323],[1,40,3301],[34,39,1654],[16,36,5011],[0,20,513],[0,26,7182],[30,33,2451],[18,31,104],[2,28,9122],[11,26,8976],[13,21,7558],[29,35,1471],[28,39,2614],[6,8,6209],[8,29,8780],[1,33,7691],[2,19,4801],[8,9,3902],[17,22,5612],[0,4,2792],[6,35,6456],[1,16,4945],[7,8,9439],[4,5,2057],[0,31,3860],[35,37,5574],[4,34,1101],[4,24,7752],[8,22,4829],[25,30,1862],[1,18,6244],[1,27,7166],[28,40,3716],[5,17,4075],[16,27,3666],[5,36,7670],[31,37,3642],[0,21,5463],[16,20,6145],[3,12,9859],[23,33,7522],[21,22,9816],[15,19,7969],[27,31,3218],[9,12,1316],[16,29,2101],[5,18,9166],[31,33,8761],[11,16,6075],[8,32,226],[9,15,2864],[9,23,3363],[0,25,9441],[23,35,870],[20,37,1674],[23,31,3710],[1,39,533],[10,21,7178],[8,40,5466],[10,24,8536],[5,21,4834],[19,24,3304],[7,29,470],[20,28,3407],[26,30,9417],[21,35,6087],[13,17,5590],[11,31,8147],[1,31,9449],[7,9,5637],[11,38,1727],[30,31,8583],[7,12,896],[10,38,1576],[16,25,6683],[1,37,6871],[6,22,399],[15,23,3204],[2,31,6211],[17,31,1490],[15,27,8870],[14,32,9155],[15,38,7647],[14,33,7117],[9,18,1905],[12,35,3374],[15,17,1133],[8,10,4176],[23,29,1540],[26,36,9500],[22,33,2853],[12,16,779],[1,17,2187],[2,10,3618],[1,20,9297],[6,23,1715],[32,39,9196],[2,6,3146],[7,24,4681],[17,26,3374],[25,32,4699],[9,13,9223],[8,39,9874],[6,39,7038],[16,22,9786],[5,13,4283],[22,30,2825]]
	distanceThreshold = 6544
	g = {}
	for e in edges:
		if e[0] in g:
			g[e[0]].append([e[1], e[2]])
		else:
			g[e[0]] = [[e[1], e[2]]]
		if e[1] in g:
			g[e[1]].append([e[0], e[2]])
		else:
			g[e[1]] = [[e[0], e[2]]]
	mi = 10**9
	ans = 0
	for node in range(n-1, -1, -1):
		rem = distanceThreshold
		visited = [0 for i in range(n)]
		temp = bfs(node, g, visited, rem)
		# print(node, ':', temp)
		if temp < mi:
			mi = temp
			ans = node
		if mi == 0:
			return ans
	return ans

print(findTheCity())
"""

"""
from functools import lru_cache

def findTheCity():
	# n = 41
	# edges = [[29,32,7398],[18,21,8588],[10,29,2094],[2,29,1036],[5,35,4315],[4,14,2184],[7,19,9872],[16,40,672],[24,39,2201],[15,20,2012],[30,39,2848],[17,28,4143],[6,38,28],[12,21,2185],[8,12,9527],[11,15,9942],[23,25,811],[25,31,8985],[18,30,8918],[24,38,969],[24,34,2776],[34,36,3454],[19,23,9161],[26,40,4035],[8,31,4376],[3,39,6183],[18,29,2397],[1,6,5482],[6,40,3903],[17,29,7125],[2,32,9258],[15,30,7497],[12,15,9657],[12,24,892],[14,36,7960],[1,15,5023],[17,39,3433],[33,40,1613],[11,34,2695],[1,12,5288],[5,22,9260],[2,5,8702],[19,28,2027],[31,35,9745],[15,40,1565],[14,19,6641],[3,18,5141],[16,34,5947],[6,33,1114],[4,13,2080],[11,39,2843],[25,37,1167],[0,34,6143],[3,23,444],[18,19,2936],[17,19,4341],[18,23,1134],[29,34,8923],[28,38,5300],[7,22,6734],[9,22,2235],[8,28,2835],[2,12,7702],[18,32,2048],[17,18,7682],[6,12,3953],[6,34,3051],[19,27,6487],[3,19,6160],[8,35,3333],[36,39,1990],[29,33,2203],[34,38,5595],[23,37,8960],[0,24,8470],[13,28,85],[21,39,3250],[4,10,1549],[0,28,9062],[3,21,4926],[32,34,2138],[30,32,9694],[2,25,3531],[26,33,8241],[18,22,8876],[0,16,6227],[2,35,7304],[13,22,654],[2,7,9667],[25,33,8686],[21,23,9718],[22,25,6604],[8,21,6521],[26,31,6222],[18,36,8305],[31,40,7582],[24,25,2524],[13,36,9048],[2,9,3568],[6,11,4336],[23,36,5319],[28,32,4409],[10,23,790],[30,37,5179],[7,38,6624],[18,39,8444],[14,39,1022],[29,39,8329],[3,38,9310],[24,35,8086],[11,17,1766],[3,6,3850],[4,8,3376],[18,37,2368],[8,15,398],[1,2,2998],[5,39,50],[7,17,7062],[21,36,9391],[3,36,4478],[1,13,4560],[6,31,30],[10,11,1666],[11,33,866],[29,37,9470],[0,15,6181],[24,40,3012],[15,16,8854],[25,36,4158],[8,13,388],[33,38,6661],[13,27,8127],[4,18,2828],[17,23,4783],[13,25,4370],[3,14,2713],[31,36,8153],[10,35,5836],[4,16,3998],[21,24,4209],[32,40,3710],[30,40,5616],[16,32,3536],[29,40,7495],[5,6,777],[12,14,4380],[4,35,5668],[12,18,8142],[0,23,3231],[6,28,3445],[18,20,7036],[3,8,2966],[1,11,5310],[10,28,7883],[9,24,361],[27,35,7415],[3,10,9070],[2,22,7163],[35,40,4238],[19,40,3302],[13,14,9067],[9,19,5590],[33,35,2904],[9,38,7246],[8,20,9429],[11,30,5056],[32,36,2986],[19,29,6922],[18,24,3543],[27,40,3117],[25,26,975],[3,15,1316],[13,32,3230],[32,38,2740],[4,6,5906],[6,37,6663],[33,39,3667],[12,38,3376],[2,38,9],[19,38,7211],[30,36,5943],[4,40,8362],[7,15,9353],[14,38,619],[15,25,4784],[7,30,8267],[0,33,9941],[20,35,8543],[20,27,2515],[10,19,1900],[3,27,3704],[13,40,8393],[0,38,1435],[23,39,2619],[15,29,6820],[6,21,7176],[2,23,1626],[12,19,9334],[10,13,5479],[3,34,270],[20,36,8556],[0,5,5050],[2,24,993],[23,28,6902],[22,38,5125],[4,25,8285],[9,39,9245],[1,14,4116],[15,22,9249],[6,19,2510],[7,25,6362],[17,40,2957],[13,18,6081],[10,22,5311],[11,40,2231],[19,30,2061],[4,11,8774],[14,22,7865],[22,35,7748],[6,18,9730],[12,37,6419],[12,13,6611],[9,29,2926],[5,14,4481],[5,40,7552],[5,27,6362],[15,33,5538],[0,35,2325],[13,24,6075],[0,8,1198],[5,7,9739],[12,23,2329],[20,24,368],[15,21,1790],[33,37,8373],[1,22,3827],[4,15,4412],[4,32,4626],[38,39,3299],[8,36,231],[16,35,9382],[2,30,162],[7,33,6495],[0,18,860],[4,26,7174],[18,25,1117],[7,40,7368],[12,40,2374],[25,39,5120],[32,33,8813],[16,30,9742],[19,22,1778],[25,38,2587],[21,32,2794],[12,25,1230],[18,35,8593],[5,31,1878],[35,38,1777],[30,35,2493],[12,39,8549],[12,30,102],[5,12,8159],[23,40,9337],[3,40,1613],[21,33,5667],[26,35,2311],[6,10,277],[36,40,8292],[12,28,466],[4,20,5373],[17,34,8137],[3,28,9499],[3,32,3053],[12,34,9842],[1,4,2564],[15,26,8159],[11,32,1987],[23,38,4242],[20,30,2584],[12,17,5508],[13,26,5762],[19,25,3713],[35,39,8299],[16,38,1569],[3,33,8],[28,36,7840],[17,25,2697],[8,26,4273],[4,30,916],[2,8,9983],[2,3,8751],[9,25,1807],[11,20,9608],[3,7,8849],[3,37,4513],[23,24,5153],[10,20,4732],[2,15,5577],[11,37,5918],[16,37,4528],[2,36,2655],[4,29,4764],[5,11,9782],[7,14,9813],[29,38,6194],[25,28,6494],[21,31,3215],[16,21,5671],[18,34,1062],[28,29,7210],[4,33,370],[14,35,7641],[8,17,5084],[32,37,1249],[14,25,8996],[7,20,6614],[4,21,4482],[24,26,8596],[5,15,4318],[11,35,3378],[14,15,7614],[19,34,7340],[20,29,3803],[21,29,7340],[17,24,114],[23,34,6998],[1,26,4844],[0,19,4598],[29,36,991],[20,39,603],[10,36,3472],[0,40,7022],[17,30,4478],[22,28,3964],[13,16,7288],[9,37,5743],[4,19,5391],[10,32,6681],[14,37,4790],[6,25,8524],[19,33,19],[13,39,4386],[0,7,3044],[31,39,4521],[13,38,112],[11,23,1165],[10,15,2360],[3,17,2633],[0,13,7735],[6,14,9568],[10,18,1704],[16,24,4960],[1,19,4486],[27,28,6513],[13,34,5320],[18,38,1955],[10,12,1490],[0,39,9650],[11,18,1911],[19,20,2503],[30,38,5934],[20,23,1169],[9,33,1654],[21,27,4047],[34,37,8988],[21,34,9933],[27,29,5157],[2,13,9683],[24,29,9869],[2,20,587],[10,16,3501],[29,30,3658],[8,18,5723],[6,27,2290],[26,37,1025],[6,29,2054],[0,32,8301],[1,23,1913],[7,32,3891],[11,28,2289],[20,33,3235],[31,34,7810],[26,29,4253],[5,25,6489],[3,31,5849],[14,30,8659],[5,33,1573],[2,34,5631],[6,24,9233],[15,28,20],[6,7,3370],[21,25,3164],[13,31,4332],[2,40,8563],[4,17,2914],[24,28,1489],[15,24,7814],[7,27,1997],[4,27,382],[14,31,2418],[31,38,6623],[3,13,4781],[18,27,4366],[10,25,9791],[3,29,966],[28,33,1794],[22,32,3833],[11,14,4830],[16,18,445],[0,2,9952],[8,37,5220],[3,5,431],[22,37,7854],[19,21,2589],[34,35,3141],[2,4,2886],[20,40,6911],[7,11,2342],[9,26,7481],[2,17,7286],[16,23,2125],[7,23,5729],[11,36,1889],[3,30,723],[1,30,832],[7,18,9922],[4,23,2448],[9,30,9296],[0,36,5952],[4,22,6294],[9,32,1337],[11,13,5448],[33,36,5227],[1,8,5964],[10,14,1408],[24,27,788],[6,32,4425],[25,27,2184],[22,24,8774],[26,28,7974],[12,31,4386],[11,29,4277],[22,27,8791],[5,8,1339],[37,38,2489],[12,29,5621],[16,33,2190],[12,22,3768],[16,31,7208],[11,27,6979],[22,26,9630],[21,38,8823],[11,22,1535],[12,33,4094],[8,11,4161],[10,39,7740],[0,12,9197],[8,25,6145],[24,36,4001],[1,7,352],[9,28,4069],[7,21,9550],[27,32,6686],[0,37,6813],[15,39,5541],[35,36,743],[3,4,1680],[1,29,370],[15,31,38],[9,27,4184],[22,23,6374],[27,37,1807],[18,28,5905],[0,14,3204],[9,36,6711],[14,20,1110],[18,33,8230],[10,31,7701],[4,28,2232],[5,38,3146],[14,18,989],[1,9,1541],[22,39,8912],[22,40,9879],[5,29,8804],[0,3,6015],[37,40,5955],[8,30,1542],[15,32,7869],[5,16,4776],[6,9,5627],[8,34,290],[13,29,7289],[13,23,364],[23,32,3036],[9,21,32],[19,35,1023],[16,39,9250],[27,39,9124],[7,39,1010],[4,7,8908],[6,13,9703],[2,27,4384],[4,36,4069],[3,9,2764],[1,38,9560],[5,37,830],[5,9,6897],[27,34,8895],[25,40,700],[7,16,8361],[27,36,5088],[7,36,5317],[0,10,9807],[8,19,8962],[19,31,3126],[21,28,333],[4,37,6387],[7,26,8992],[5,10,6448],[19,36,1739],[10,34,8464],[22,29,793],[0,30,9755],[10,33,8488],[23,30,6942],[11,21,6042],[5,32,9620],[33,34,343],[15,18,3223],[6,15,6013],[1,5,7221],[1,34,145],[17,21,2095],[9,10,6221],[14,40,9529],[21,30,8051],[23,27,6392],[2,39,1585],[14,16,5266],[7,10,323],[1,40,3301],[34,39,1654],[16,36,5011],[0,20,513],[0,26,7182],[30,33,2451],[18,31,104],[2,28,9122],[11,26,8976],[13,21,7558],[29,35,1471],[28,39,2614],[6,8,6209],[8,29,8780],[1,33,7691],[2,19,4801],[8,9,3902],[17,22,5612],[0,4,2792],[6,35,6456],[1,16,4945],[7,8,9439],[4,5,2057],[0,31,3860],[35,37,5574],[4,34,1101],[4,24,7752],[8,22,4829],[25,30,1862],[1,18,6244],[1,27,7166],[28,40,3716],[5,17,4075],[16,27,3666],[5,36,7670],[31,37,3642],[0,21,5463],[16,20,6145],[3,12,9859],[23,33,7522],[21,22,9816],[15,19,7969],[27,31,3218],[9,12,1316],[16,29,2101],[5,18,9166],[31,33,8761],[11,16,6075],[8,32,226],[9,15,2864],[9,23,3363],[0,25,9441],[23,35,870],[20,37,1674],[23,31,3710],[1,39,533],[10,21,7178],[8,40,5466],[10,24,8536],[5,21,4834],[19,24,3304],[7,29,470],[20,28,3407],[26,30,9417],[21,35,6087],[13,17,5590],[11,31,8147],[1,31,9449],[7,9,5637],[11,38,1727],[30,31,8583],[7,12,896],[10,38,1576],[16,25,6683],[1,37,6871],[6,22,399],[15,23,3204],[2,31,6211],[17,31,1490],[15,27,8870],[14,32,9155],[15,38,7647],[14,33,7117],[9,18,1905],[12,35,3374],[15,17,1133],[8,10,4176],[23,29,1540],[26,36,9500],[22,33,2853],[12,16,779],[1,17,2187],[2,10,3618],[1,20,9297],[6,23,1715],[32,39,9196],[2,6,3146],[7,24,4681],[17,26,3374],[25,32,4699],[9,13,9223],[8,39,9874],[6,39,7038],[16,22,9786],[5,13,4283],[22,30,2825]]
	# distanceThreshold = 6544
	n = 4
	edges = [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3,  1]]
	distanceThreshold = 4
	dist = [[10**9 for i in range(n)] for j in range(n)]
	for i in range(n):
		dist[i][i] = 0
	for ed in edges:
		dist[ed[0]][ed[1]] = dist[ed[1]][ed[0]] = ed[2]
	for i in range(n):
		for j in range(n):
			for k in range(n):
				dist[i][j] = min(dist[i][j], dist[i][k]+dist[k][j])
	print(dist[24][15])
	ans = 0
	mi = n+1
	for i in range(n):
		reach = 0
		for j in range(n):
			if dist[i][j]<= distanceThreshold:
				reach += 1
		if reach <= mi:
			mi = reach
			ans = i
	return ans
print(findTheCity())
"""

# T = int(input())
# for t in range(T):
# 	flag = 0
# 	n, p = map(int, input().split())
# 	A = [[val, ind, 0] for ind, val in enumerate(list(map(int, input().split())))]
# 	A = sorted(A, key=lambda x:-x[0])
# 	rem = p
# 	last_pos = 0
# 	for i in range(len(A)):
# 		if rem%A[i][0] != 0:
# 			last_pos = i
# 			flag = 1
# 			A[i][2], rem = divmod(rem, A[i][0])
# 	A[last_pos][2] += 1
# 	if flag == 0:
# 		print('NO')
# 	else:
# 		print('YES',end=' ')
# 		A = sorted(A, key=lambda x:x[1])
# 		for x in A:
# 			print(x[2], end=' ')
# 		print()

T = int(input())
for t in range(T):
	flag = 0
	n, p = map(int, input().split())
	A = list(map(int, input().split()))
	Ans = [0]*n
	for x in range(n):
		if p%A[x] != 0:
			flag = 1
			print('YES',end=' ')
			Ans[x] = p//A[x] + 1
			print(' '.join(map(str, Ans)))
			break
	if flag == 0:
		print('NO')


"""
T = int(input())
for t in range(T):
	n = int(input())
	A = list(map(int, input().split()))
	B = list(map(int, input().split()))
	A.sort()
	B.sort()
	Ans = 0
	for i in range(n):
		Ans += min(A[i], B[i])
	print(Ans)
"""
"""
T = int(input())
for t in range(T):
	n, k = map(int, input().split())
	A = list(map(int, input().split()))
	Ans = 0
	for i in range(n-1):
		Ans += A[i]%k
	if (A[-1]%k)+Ans >= k:
		print((Ans + A[-1])%k)
	else:
		print(Ans+(A[-1]%k))
"""

"""
from itertools import permutations

def product(Arr):
	Ans = 0
	for i in range(4):
		if Arr[i] == 0:
			Ans -= 100
		else:
			Ans += Arr[i]*25*(i+1)
	return Ans

T = int(input())
final = 0
for t in range(T):
	n = int(input())
	A = [[0]*4 for i in range(4)]
	for i in range(n):
		x, y = map(str, input().split())
		A[ord(x)-ord('A')][int(y)//3 - 1] += 1
	# print(A)
	l = list(permutations(range(4)))
	Ans = -10**9
	for x in l:
		B = [A[x[i]][i] for i in range(4)]
		B.sort()
		Ans = max(Ans, product(B))
	print(Ans)
	final+=Ans
print(final)
"""











